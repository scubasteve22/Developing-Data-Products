geom_histogram(colour = "black", fill = "blue") +
xlab("Date") +
ylab("Total Steps") +
ggtitle("Total number of steps taken each day") +
scale_x_date(breaks = "1 week", minor_breaks = "1 day", labels=date_format("%D")) +
stat_summary(aes(group=dailysteps$steps), fun.y=mean, geom="line", colour="green")
##Create the histogram, set the colour and labels
qplot(dailysteps$formatteddate, weight=dailysteps$steps, data=dailysteps) +
geom_histogram(colour = "black", fill = "blue") +
xlab("Date") +
ylab("Total Steps") +
ggtitle("Total number of steps taken each day") +
scale_x_date(breaks = "1 week", minor_breaks = "1 day", labels=date_format("%D")) +
geom_line(stat="hline", linetype="dotted", yintercept="mean")
?geom_line
##Create the histogram, set the colour and labels
qplot(dailysteps$formatteddate, weight=dailysteps$steps, data=dailysteps) +
geom_histogram(colour = "black", fill = "blue") +
xlab("Date") +
ylab("Total Steps") +
ggtitle("Total number of steps taken each day") +
scale_x_date(breaks = "1 week", minor_breaks = "1 day", labels=date_format("%D")) +
stat_summary(fun.y=mean, geom="point")
install.packages("knitr")
<opts_chunk$set(tidy=FALSE)>
---
title: "Reproducible Research: Peer Assessment 1"
output: html_document
---
## Loading and preprocessing the data
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
```{r, echo=TRUE}
# Code to complete the first peer assignment - plot3 - 10/07/14
library(ggplot2)
library(scales)
library(knitr)
#Set the location of the data to use
fileurl<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
#Set the name of the zip file we wish to extract
myzip = "Factivity.zip"
#If data file has not yet been downloaded then fetch it otherwise move on
if (!file.exists(myzip)) {
download.file(fileurl, destfile=myzip, method="curl")
unzip(myzip)
}
activity <- read.csv("./activity.csv", header=TRUE, sep=",", stringsAsFactors=FALSE, na.strings='NA')
activity["formatteddate"] <- NA
activity$formatteddate <- as.Date(activity$date, "%Y-%m-%d")
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
## What is mean total number of steps taken per day?
## What is the average daily activity pattern?
## Imputing missing values
library(ggplot2)
library(scales)
library(knitr)
#Set the location of the data to use
fileurl<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
#Set the name of the zip file we wish to extract
myzip = "Factivity.zip"
#If data file has not yet been downloaded then fetch it otherwise move on
if (!file.exists(myzip)) {
download.file(fileurl, destfile=myzip, method="curl")
unzip(myzip)
}
activity <- read.csv("./activity.csv", header=TRUE, sep=",", stringsAsFactors=FALSE, na.strings='NA')
activity["formatteddate"] <- NA
activity$formatteddate <- as.Date(activity$date, "%Y-%m-%d")
##Create the histogram, set the colour and labels
qplot(dailysteps$formatteddate, weight=dailysteps$steps, data=dailysteps) +
geom_histogram(colour = "black", fill = "blue") +
xlab("Date") +
ylab("Total Steps") +
ggtitle("Total number of steps taken each day") +
scale_x_date(breaks = "1 week", minor_breaks = "1 day", labels=date_format("%D")) +
geom_line(stat="hline", linetype="dotted", yintercept="mean")
opts_chunk$set()
?opts_chunk
opts_chunk$set("warning"=FALSE)
sqrt((1/12)/1000)
sqrt((1/12)/1000)*100
mn <- mean(mtcars$mpg)
s <- sd(mtcars$mpg)
z <- qnorm(.05)
mu0 <- mn - z * s / sqrt(nrow(mtcars))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
?rcharts
??rcharts
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
mtcars
?mtcars
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mean',value = 70, min = 62, max = 74, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength,
p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
featurePlot(x = training[,c('Cement',
'BlastFurnaceSlag',
'FlyAsh',
'Water',
'Superplasticizer',
'CoarseAggregate',
'FineAggregate', 'Age')],
y = training$CompressiveStrength )
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength,
p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis,
p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh = 0.8, outcome = training$diagnosis)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = testing$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis,
p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh = 0.8, outcome = training$diagnosis)
preProc <- preProcess(ss, method='pca', thresh = 0.9, outcome = training$diagnosis)
preProd
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
ss1 <- train(ss, testing$diagnosis, method='glm')
?train
View(ss)
model1 <- train(ss, ss$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = ss$diagnosis)
model1 <- train(ss, ss$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = ss$diagnosis)
model2
model1
model1 <- train(ss, ss$diagnosis, method='glm')
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = testing$diagnosis)
model1 <- train(ss, testing$diagnosis, method='glm')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
diagnosis
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
View(test)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(training)
View(testing)
View(training)
adData = data.frame(diagnosis,predictors)
View(adData)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(testing)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(testing)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
featurePlot(x = training[,c('Cement',
'BlastFurnaceSlag',
'FlyAsh',
'Water',
'Superplasticizer',
'CoarseAggregate',
'FineAggregate', 'Age')],
y = training$CompressiveStrength )
qplot(training, CompressiveStrength)
qplot(training, CompressiveStrength)
featurePlot(x = training[,c('Cement',
'BlastFurnaceSlag',
'FlyAsh',
'Water',
'Superplasticizer',
'CoarseAggregate',
'FineAggregate', 'Age')],
y = training$CompressiveStrength )
qplot(training[,c('Cement',
'BlastFurnaceSlag',
'FlyAsh',
'Water',
'Superplasticizer',
'CoarseAggregate',
'FineAggregate', 'Age')], training$CompressiveStrength)
featurePlot(x = training[,c('Cement',
'BlastFurnaceSlag',
'FlyAsh',
'Water',
'Superplasticizer',
'CoarseAggregate',
'FineAggregate', 'Age')],
y = training$CompressiveStrength )
install.packages("e1071")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = testing$diagnosis)
model1
model2
model1 <- train(ss, testing$diagnosis, method='glm')
model1
ss <- training[,grep('^IL', x = names(training) )]
model1 <- train(ss, training$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = training$diagnosis)
model1
model1 <- train(ss, ss$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = ss$diagnosis)
model1 <- train(ss, testing$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = testing$diagnosis)
model1 <- train(ss, testing$diagnosis, method='glm')
ss <- training[,grep('^IL', x = names(training) )]
model1 <- train(ss, testing$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = testing$diagnosis)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- testing[,grep('^IL', x = names(testing) )]
model1 <- train(ss, testing$diagnosis, method='glm')
model2 <- preProcess(ss, method='pca', thresh = 0.8, outcome = testing$diagnosis)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
set.seed(3433)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis,
p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh = 0.8, outcome = training$diagnosis)
preProc
shiny::runApp('Developing-Data-Products')
shiny::runApp('Developing-Data-Products')
shiny::runApp('Developing-Data-Products')
shiny::runApp('Developing-Data-Products')
shiny::runApp('Developing-Data-Products')
shiny::runApp('Developing-Data-Products')
shinyapps::setAccountInfo(
name="scubasteve22",
token="57F012868F729BDF8BE125F752AFF9C8",
secret="<SECRET>")
install.packages("shinyapps")
shinyapps::setAccountInfo(
name="scubasteve22",
token="57F012868F729BDF8BE125F752AFF9C8",
secret="<SECRET>")
shinyapps::setAccountInfo(
name="scubasteve22",
token="57F012868F729BDF8BE125F752AFF9C8",
secret="a5ezwMPCiXz6+Ylc7gfNp4fcBItNykOOPyN0AI7o")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='scubasteve22', token='57F012868F729BDF8BE125F752AFF9C8', secret='a5ezwMPCiXz6+Ylc7gfNp4fcBItNykOOPyN0AI7o')
shiny::runApp('Developing-Data-Products')
library(shiny)
runApp()
shiny::runApp('Developing-Data-Products')
getwd()
setwd("/Users/ScubaMac/Documents/SW Docs/R Studio/Developing-Data-Products")
library(shiny)
runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
